//
//  StatementsViewController.swift
//  Bank-CleanSwift
//
//  Created by Scott Takahashi on 02/08/20.
//  Copyright (c) 2020 Scott Takahashi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsDisplayLogic: class
{
  func displaySomething(viewModel: Statements.Something.ViewModel)
}

class StatementsViewController: UIViewController, StatementsDisplayLogic {
    
    @IBOutlet private(set) weak var userNameLabel: UILabel!
    @IBOutlet private(set) weak var contaLabel: UILabel!
    @IBOutlet private(set) weak var contaValueLabel: UILabel!
    @IBOutlet private(set) weak var saldoLabel: UILabel!
    @IBOutlet private(set) weak var saldoValueLabel: UILabel!
    
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?

  // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
    super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupUserHeader()
        
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        .lightContent
    }
  
    @IBAction func logout(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Statements.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Statements.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

// MARK: private
extension StatementsViewController {
    
    private func setup() {
        let viewController = self
        let interactor = StatementsInteractor()
        let presenter = StatementsPresenter()
        let router = StatementsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUserHeader() {
        guard let user = router?.dataStore?.userAccount else { fatalError("expected user") }
        userNameLabel.text = user.name
        contaLabel.text = "statements.contaLabel".localized()
        contaValueLabel.text = "\(user.bankAccount ?? "") / \(user.agency ?? "")"
        saldoLabel.text = "statements.saldoLabel".localized()
        saldoValueLabel.text = self.formatCurrency(value: user.balance ?? 0.0)
        
    }
    
    private func formatCurrency(value: Double) -> String {
        let currencyFormatter = NumberFormatter()
//        currencyFormatter.usesGroupingSeparator = true
        currencyFormatter.numberStyle = .currency
        currencyFormatter.locale = Locale.current
        let priceString = currencyFormatter.string(from: NSNumber(value: value))!
        return priceString
    }
    
}
