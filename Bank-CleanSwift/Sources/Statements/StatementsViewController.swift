//
//  StatementsViewController.swift
//  Bank-CleanSwift
//
//  Created by Scott Takahashi on 02/08/20.
//  Copyright (c) 2020 Scott Takahashi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsDisplayLogic: class
{
    
    func displayError(viewModel: Statements.Error.ViewModel)
    
    func displayStatements(viewModel: Statements.ShowStatements.ViewModel)
}

class StatementsViewController: BaseViewController  {
    
    @IBOutlet private(set) weak var userNameLabel: UILabel!
    @IBOutlet private(set) weak var contaLabel: UILabel!
    @IBOutlet private(set) weak var contaValueLabel: UILabel!
    @IBOutlet private(set) weak var saldoLabel: UILabel!
    @IBOutlet private(set) weak var saldoValueLabel: UILabel!
    @IBOutlet private(set) weak var tableView: UITableView!
    
    var interactor: StatementsBusinessLogic?
    var router: (NSObjectProtocol & StatementsRoutingLogic & StatementsDataPassing)?
    
    var statements = [Statement]()
    private let statementCellIdentifier = "statementCell"

  // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder)
    {
    super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setupUserHeader()
        self.setupTableView()
        self.getStatements()
        
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        .lightContent
    }
  
    @IBAction func logout(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
 
}

extension StatementsViewController: StatementsDisplayLogic {
    
    func displayStatements(viewModel: Statements.ShowStatements.ViewModel) {
        self.statements = viewModel.statements
        self.stopSpinner()
        self.tableView.reloadData()
    }
    
    
    func displayError(viewModel: Statements.Error.ViewModel) {
        let alert = self.buildAlert(error: viewModel.error)
        self.present(alert, animated: true, completion: nil)
    }
}

extension StatementsViewController: UITableViewDataSource, UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = self.tableView.dequeueReusableCell(withIdentifier: statementCellIdentifier) as? StatementTableCell else {
            fatalError("Should have register statement cell")
        }
        cell.setup(self.statements[indexPath.row])
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.statements.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return StatementTableCellHeader()
    }
}

// MARK: private
extension StatementsViewController {
    
    private func setup() {
        let viewController = self
        let interactor = StatementsInteractor()
        let presenter = StatementsPresenter()
        let router = StatementsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUserHeader() {
        guard let user = router?.dataStore?.userAccount else { fatalError("expected user") }
        userNameLabel.text = user.name
        contaLabel.text = "statements.contaLabel".localized()
        contaValueLabel.text = "\(user.bankAccount ?? "") / \(user.agency ?? "")"
        saldoLabel.text = "statements.saldoLabel".localized()
        saldoValueLabel.text = user.balance?.formatCurrency()
    }
    
    private func setupTableView() {
        self.tableView.dataSource = self
        self.tableView.delegate = self
        let nib = UINib(nibName: "StatementTableCell", bundle: nil)
        tableView.register(nib, forCellReuseIdentifier: statementCellIdentifier)
        self.tableView.separatorStyle = UITableViewCell.SeparatorStyle.none
    }
    
    private func buildAlert(error: BankError) -> UIAlertController {
        let tryAgainAction = UIAlertAction(title: "statements.fetchAgain".localized(), style: .default) { [weak self] (action) in
            guard let self = self else { return }
            self.getStatements()
        }
        let dismissAction = UIAlertAction(title: self.alertDismissButtonTitle.localized(), style: .cancel) { [weak self] (action) in
            guard let self = self else { return }
            self.stopSpinner()
            self.dismiss(animated: true, completion: nil)
        }
        return self.buildAlert(error: error, actions: [tryAgainAction, dismissAction])
    }
    
    private func getStatements() {
        self.showSpinner()
        self.interactor?.getStatments()
    }
    
}
