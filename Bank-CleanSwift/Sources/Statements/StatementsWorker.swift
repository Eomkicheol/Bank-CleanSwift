//
//  StatementsWorker.swift
//  Bank-CleanSwift
//
//  Created by Scott Takahashi on 02/08/20.
//  Copyright (c) 2020 Scott Takahashi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

protocol StatementsService {
    
    typealias StatementsResult = Swift.Result<[Statement], BankError>
    
    func getStatements(userId: Int, callback: @escaping (StatementsResult) -> Void)
}


class StatementsWorker: StatementsService {
    
    let apiProvider: ApiProvider
    
    init(apiProvider: ApiProvider) {
        self.apiProvider = apiProvider
    }
  
    func getStatements(userId: Int, callback: @escaping (StatementsResult) -> Void) {
        self.apiProvider.fetchStatements(userId: userId) {[weak self] (result) in
            guard let self = self else { return }
            switch result {
            case .success(let data):
                callback(self.map(data: data))
            case .failure(let error):
                callback(.failure(BankError.apiError(message: error.localizedDescription)))
            }
        }
    }
    
}

extension StatementsWorker {
    private func map(data: Data) -> StatementsResult {
        do {
            let statements = try StatementsMapper.map(data)
            return .success(statements)
        } catch  {
            return .failure(error as! BankError)
        }
    }
}
