//
//  StatementsInteractor.swift
//  Bank-CleanSwift
//
//  Created by Scott Takahashi on 02/08/20.
//  Copyright (c) 2020 Scott Takahashi. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol StatementsBusinessLogic
{
    func getStatments()
}

protocol StatementsDataStore
{
    var userAccount: UserAccount? { get set }
}

class StatementsInteractor: StatementsBusinessLogic, StatementsDataStore {
    var presenter: StatementsPresentationLogic?
    var worker: StatementsService?
    var userAccount: UserAccount?
  
    init() {
        let bankApiProvider = BankHttpProvider(urlSession: URLSession.shared)
        worker = StatementsWorker(apiProvider: bankApiProvider)
    }
    
    func getStatments() {
        guard let userId = userAccount?.userId else { fatalError("expected to have user id") }
        self.worker?.getStatements(userId: userId, callback: { [weak self] (result) in
            guard let self = self else { return }
            switch result {
            case .success(let statementsResult):
                let response = Statements.ShowStatements.Response(statements: statementsResult)
                DispatchQueue.main.async {
                     self.presenter?.presetStatements(response: response)
                }
            case .failure(let error):
                let errorResponse = Statements.Error.Reponse(error: error)
                DispatchQueue.main.async {
                    self.presenter?.presentError(errorResponse: errorResponse)
                }
            }
        })
    }
}
